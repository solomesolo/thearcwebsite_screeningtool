<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Decoding Your Health Blueprint - Right Screening Finder</title>
    <style>
        /* Reset all default styles and force dark theme */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        html {
            background-color: #0a0a0a !important;
            background-image: none !important;
            color-scheme: dark !important;
        }
        
        body {
            background-color: #0a0a0a !important;
            background-image: linear-gradient(135deg, #0a0a0a 0%, #1a1a1a 50%, #0f0f0f 100%) !important;
            color: #ffffff !important;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
            line-height: 1.6;
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            position: relative;
            overflow: hidden;
            color-scheme: dark !important;
        }
        
        /* Multiple background layers to ensure dark background */
        body::before {
            content: '';
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #0a0a0a;
            background-image: linear-gradient(135deg, #0a0a0a 0%, #1a1a1a 50%, #0f0f0f 100%);
            z-index: -10;
            pointer-events: none;
        }
        
        body::after {
            content: '';
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: 
                radial-gradient(circle at 20% 20%, rgba(59, 130, 246, 0.1) 0%, transparent 50%),
                radial-gradient(circle at 80% 80%, rgba(139, 92, 246, 0.1) 0%, transparent 50%),
                radial-gradient(circle at 40% 60%, rgba(16, 185, 129, 0.05) 0%, transparent 50%);
            pointer-events: none;
            z-index: -5;
        }
        
        .loading-container {
            max-width: 800px;
            width: 90%;
            text-align: center;
            padding: 2rem;
        }
        
        .loading-header {
            margin-bottom: 3rem;
        }
        
        .loading-title {
            font-size: 2.5rem;
            font-weight: 700;
            margin-bottom: 1rem;
            background: linear-gradient(135deg, #ffffff 0%, #e2e8f0 100%);
            -webkit-background-clip: text;
            background-clip: text;
            color: transparent;
            -webkit-text-fill-color: transparent;
        }
        
        .loading-subtitle {
            font-size: 1.2rem;
            color: #cbd5e1;
            line-height: 1.6;
        }
        
        .progress-container {
            background-color: rgba(26, 26, 26, 0.95) !important;
            background-image: none !important;
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 20px;
            padding: 2.5rem;
            margin-bottom: 2rem;
            box-shadow: 
                0 20px 40px rgba(0, 0, 0, 0.3),
                0 0 0 1px rgba(255, 255, 255, 0.05);
        }
        
        .progress-bar {
            width: 100%;
            height: 8px;
            background-color: rgba(255, 255, 255, 0.1);
            background-image: none !important;
            border-radius: 4px;
            overflow: hidden;
            margin-bottom: 1.5rem;
        }
        
        .progress-fill {
            height: 100%;
            background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
            background-color: #3b82f6;
            transition: width 0.3s ease;
            width: 0%;
        }
        
        .progress-text {
            color: #ffffff;
            font-size: 1.1rem;
            font-weight: 500;
            margin-bottom: 1rem;
        }
        
        .loading-facts {
            background-color: rgba(26, 26, 26, 0.95) !important;
            background-image: none !important;
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 16px;
            padding: 2rem;
            margin-top: 2rem;
            box-shadow: 
                0 20px 40px rgba(0, 0, 0, 0.3),
                0 0 0 1px rgba(255, 255, 255, 0.05);
        }
        
        .fact-title {
            font-size: 1.2rem;
            font-weight: 600;
            color: #ffffff;
            margin-bottom: 1rem;
        }
        
        .fact-content {
            font-size: 1rem;
            color: #cbd5e1;
            line-height: 1.6;
            min-height: 60px;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .spinner {
            width: 40px;
            height: 40px;
            border: 3px solid rgba(255, 255, 255, 0.1);
            border-top: 3px solid #3b82f6;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin: 0 auto 1rem;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        /* Safari-specific fixes */
        @media screen and (-webkit-min-device-pixel-ratio: 0) {
            body {
                background-color: #0a0a0a !important;
                background-image: linear-gradient(135deg, #0a0a0a 0%, #1a1a1a 50%, #0f0f0f 100%) !important;
            }
            
            .progress-container {
                background-color: rgba(26, 26, 26, 0.95) !important;
            }
            
            .loading-facts {
                background-color: rgba(26, 26, 26, 0.95) !important;
            }
        }
    </style>
</head>
<body>
    <div class="loading-container">
        <div class="loading-header">
            <h1 class="loading-title">Decoding Your Health Blueprint</h1>
            <p class="loading-subtitle">Analyzing your responses to create a personalized screening plan...</p>
        </div>
        
        <div class="progress-container">
            <div class="spinner"></div>
            <div class="progress-bar">
                <div class="progress-fill" id="progressFill"></div>
            </div>
            <div class="progress-text" id="progressText">Initializing analysis...</div>
        </div>
        
        <div class="loading-facts">
            <h3 class="fact-title">Did You Know?</h3>
            <div class="fact-content" id="factContent">
                Loading interesting health facts...
            </div>
        </div>
    </div>

    <script>
        // Force dark background immediately on load
        document.documentElement.style.backgroundColor = '#0a0a0a';
        document.documentElement.style.backgroundImage = 'linear-gradient(135deg, #0a0a0a 0%, #1a1a1a 50%, #0f0f0f 100%)';
        document.body.style.backgroundColor = '#0a0a0a';
        document.body.style.backgroundImage = 'linear-gradient(135deg, #0a0a0a 0%, #1a1a1a 50%, #0f0f0f 100%)';
        
        const facts = [
            "70% of chronic diseases can be prevented with early detection through proper screening.",
            "Many health conditions show no symptoms until they reach advanced stages.",
            "Regular health screenings can detect issues 5-10 years before symptoms appear.",
            "Personalized screening plans are more effective than one-size-fits-all approaches.",
            "Early detection can reduce treatment costs by up to 80%.",
            "Your genetic makeup influences which screenings are most important for you.",
            "Lifestyle factors like diet and exercise affect your screening needs.",
            "Age-appropriate screenings can extend your healthy lifespan by years.",
            "Family history plays a crucial role in determining your screening priorities.",
            "Preventive care is 10 times more cost-effective than treatment."
        ];
        
        let currentFactIndex = 0;
        let progress = 0;
        let progressInterval;
        let factInterval;
        
        function updateProgress() {
            progress += Math.random() * 15;
            if (progress > 100) progress = 100;
            
            document.getElementById('progressFill').style.width = progress + '%';
            
            if (progress < 30) {
                document.getElementById('progressText').textContent = 'Analyzing your responses...';
            } else if (progress < 60) {
                document.getElementById('progressText').textContent = 'Processing health data...';
            } else if (progress < 90) {
                document.getElementById('progressText').textContent = 'Generating recommendations...';
            } else {
                document.getElementById('progressText').textContent = 'Finalizing your plan...';
            }
        }
        
        function showNextFact() {
            document.getElementById('factContent').textContent = facts[currentFactIndex];
            currentFactIndex = (currentFactIndex + 1) % facts.length;
        }
        
        async function submitQuestionnaire() {
            console.log("Starting questionnaire submission...");
            console.log("Answers from localStorage:", localStorage.getItem("questionnaireAnswers"));
            try {
                // Get answers from localStorage
                const answers = JSON.parse(localStorage.getItem('questionnaireAnswers') || '{}');
            console.log("Answers from localStorage:", answers);
            console.log("Answers keys:", Object.keys(answers));
            console.log("Answers length:", Object.keys(answers).length);
                
                // Check if we have cached results
                const cachedResults = localStorage.getItem('cachedResults');
                if (cachedResults) {
                    console.log('Using cached results');
                    localStorage.setItem('healthAssessmentResults', cachedResults);
                    setTimeout(() => {
                    console.log("Redirecting to results.html");
                        window.location.href = 'results.html';
                    }, 2000);
                    return;
                }
                
                // Make API call to analyze health
                console.log("Making API call with answers:", answers);
                const response = await fetch('http://localhost:3001/api/analyze-health', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ responses: answers })
                });
                
                console.log("API response status:", response.status);
                console.log("API response:", response);
                if (!response.ok) {
                    throw new Error('Failed to analyze health data');
                }
                
                const results = await response.json();
                
                // Store results in localStorage
                localStorage.setItem('healthAssessmentResults', JSON.stringify(results));
                
                // Cache the results
                localStorage.setItem('cachedResults', JSON.stringify(results));
                
                // Redirect to results page
                setTimeout(() => {
                    console.log("Redirecting to results.html");
                    window.location.href = 'results.html';
                }, 2000);
                
            } catch (error) {
                console.log("Error in submitQuestionnaire:", error);
                console.log("Error details:", error.message);
                console.error('Error:', error);
                document.getElementById('progressText').textContent = 'Processing complete. Redirecting to results...';
                console.log("Redirecting to results despite error");
                
                // Redirect back to questionnaire after error
                setTimeout(() => {
                    console.log("Redirecting to results.html");
                    window.location.href = 'results.html';
                }, 3000);
            }
        }
        
        // Initialize loading screen
        document.addEventListener('DOMContentLoaded', function() {
            // Start progress animation
            progressInterval = setInterval(updateProgress, 200);
            
            // Start fact rotation
            showNextFact();
            factInterval = setInterval(showNextFact, 3000);
            
            // Start questionnaire submission
            setTimeout(submitQuestionnaire, 1000);
            
            // Force dark background again after DOM load
            document.documentElement.style.backgroundColor = '#0a0a0a';
            document.body.style.backgroundColor = '#0a0a0a';
            
            // Force dark background with timeout
            setTimeout(function() {
                document.documentElement.style.backgroundColor = '#0a0a0a';
                document.body.style.backgroundColor = '#0a0a0a';
            }, 100);
        });
        
        // Cleanup intervals when page unloads
        window.addEventListener('beforeunload', function() {
            if (progressInterval) clearInterval(progressInterval);
            if (factInterval) clearInterval(factInterval);
        });
    </script>
</body>
</html>
